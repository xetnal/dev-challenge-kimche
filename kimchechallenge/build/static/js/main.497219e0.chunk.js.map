{"version":3,"sources":["App.model.js","App.js","serviceWorker.js","index.js"],"names":["GET_COUNTRIES","gql","FILTER_TYPE","client","ApolloClient","uri","App","useState","selectedCountry","setSelectedCountry","currentFilter","setFilter","useEffect","useQuery","loading","error","data","groupedByContinent","_","groupBy","countries","continent","name","groupedByLanguages","country","languages","entriesByContinent","Object","entries","entriesByLanguage","groupedData","console","log","className","type","id","value","placeholder","onChange","e","target","onClick","map","entry","i","mappedCountries","filter","toLowerCase","includes","length","key","code","emoji","capital","currency","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+iBACO,IAAMA,EACbC,YAD0B,KAkBbC,EACL,OADKA,EAEA,YAFAA,EAGD,WCdNC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCA8EQC,EA3EH,WAAO,IAAD,IAC8BC,mBAAS,IADvC,mBACTC,EADS,KACQC,EADR,OAEmBF,mBAASL,GAF5B,mBAETQ,EAFS,KAEMC,EAFN,KAIhBC,qBAAU,cAAW,CAACF,IAJN,MAMiBG,YAASb,GAAlCc,EANQ,EAMRA,QAASC,EAND,EAMCA,MAAOC,EANR,EAMQA,KACxB,GAAIF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,oCAClB,IAAKC,EAAM,OAAO,wCAClB,IAAMC,EAAqBC,IAAEC,QAAQH,EAAKI,WAAW,qBAAGC,UAA0BC,QAC5EC,EAAqBL,IAAEC,QAAQH,EAAKI,WAAW,SAACI,GAAD,yBAAaA,EAAQC,iBAArB,iBAAa,EAAoB,UAAjC,aAAa,EAAwBH,QACpFI,EAAqBC,OAAOC,QAAQX,GACpCY,EAAoBF,OAAOC,QAAQL,GACnCO,GAAW,mBACd5B,EAAmB,CAAC,GAAIc,EAAKI,YADf,cAEdlB,EAAwBwB,GAFV,cAGdxB,EAAuB2B,GAHT,GAOjB,OAFAE,QAAQC,IAAIF,GAGV,kBAAC,IAAD,CAAgB3B,OAAQA,GACtB,yBAAK8B,UAAU,uDACb,wBAAIA,UAAU,oBAAd,kBAGA,2BACEC,KAAK,OACLZ,KAAK,UACLa,GAAG,UACHF,UAAU,uBACVG,MAAO5B,EACP6B,YAAY,uBACZC,SACE,SAACC,GAAD,OAAO9B,EAAmB8B,EAAEC,OAAOJ,UAGvC,yBAAKH,UAAU,QACb,4BAAQA,UAAWvB,IAAkBR,EAAwB,yBAA2B,oBAAqBuC,QAAS,kBAAM9B,EAAUT,KAAtI,sBACA,4BAAQ+B,UAAWvB,IAAkBR,EAAuB,8BAAgC,yBAA0BuC,QAAS,kBAAM9B,EAAUT,KAA/I,sBAGA4B,EAAYpB,GAAegC,KAAI,SAACC,EAAOC,GACrC,GAAwB,KAApBpC,EAAwB,OAAO,qCACnC,IACE,IAAMqC,EAAkBF,EAAM,GAAGG,QAAO,SAACtB,GAAD,OAAaA,EAAQF,KAAKyB,cAAcC,SAASxC,MACzF,IAAmB,OAAfqC,QAAe,IAAfA,OAAA,EAAAA,EAAiBI,QAAS,EAC5B,OAAO,oCAAE,wBAAIhB,UAAU,0CAA0CU,EAAM,IACpEE,EAAgBH,KAAI,SAAClB,GAEpB,OAEE,yBAAKS,UAAU,mDAAmDiB,IAAK1B,EAAQ2B,MAC7E,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,cAAa,8BAAOT,EAAQ4B,MAAf,KAA8B5B,EAAQF,MACjE,wBAAIW,UAAU,uBAAd,YAA8CT,EAAQ6B,SACtD,wBAAIpB,UAAU,uBAAd,aAA+CT,EAAQ8B,gBASnE,MAAOvC,GACP,OAAO,uECnEDwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCPAxD,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAEPuD,IAASC,OACP,kBAAC,IAAD,CAAgB1D,OAAQA,GACtB,kBAAC,EAAD,OAGF2D,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLgB,QAAQhB,MAAMA,EAAMwD,c","file":"static/js/main.497219e0.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\nexport const GET_COUNTRIES =\r\ngql`\r\nquery getCountries{\r\n  countries{\r\n    code\r\n    name\r\n    emoji\r\n    capital\r\n    currency\r\n    languages{\r\n      name\r\n    }\r\n    continent{\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\nexport const FILTER_TYPE = {\r\n  NONE: 'NONE',\r\n  CONTINENT: 'CONTINENT',\r\n  LANGUAGE: 'LANGUAGE'\r\n};","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\n// import { FaSearch } from 'react-icons/fa';\nimport _ from \"lodash\"\nimport { GET_COUNTRIES, FILTER_TYPE } from \"./App.model\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n});\n\nconst App = () => {\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [currentFilter, setFilter] = useState(FILTER_TYPE.CONTINENT);\n\n  useEffect(() => { }, [currentFilter]);\n\n  const { loading, error, data } = useQuery(GET_COUNTRIES);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  const groupedByContinent = _.groupBy(data.countries, ({ continent }) => continent.name);\n  const groupedByLanguages = _.groupBy(data.countries, (country) => country.languages?.[0]?.name);\n  const entriesByContinent = Object.entries(groupedByContinent);\n  const entriesByLanguage = Object.entries(groupedByLanguages);\n  const groupedData = {\n    [FILTER_TYPE.NONE]: [\"\", data.countries],\n    [FILTER_TYPE.CONTINENT]: entriesByContinent,\n    [FILTER_TYPE.LANGUAGE]: entriesByLanguage,\n  };\n  console.log(groupedData)\n  // console.log(groupedByLanguages)\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"animate__animated animate__fadeIn container mx-auto\">\n        <h2 className=\"text-center my-3\">\n          Country Search\n        </h2>\n        <input\n          type=\"text\"\n          name=\"country\"\n          id=\"country\"\n          className=\"form-control rounded\"\n          value={selectedCountry}\n          placeholder=\"Search for a country\"\n          onChange={\n            (e) => setSelectedCountry(e.target.value)\n          }\n        />\n        <div className=\"my-3\">\n          <button className={currentFilter === FILTER_TYPE.CONTINENT ? 'active btn btn-primary' : 'btn btn-secondary'} onClick={() => setFilter(FILTER_TYPE.CONTINENT)}>Group By Continent</button>\n          <button className={currentFilter === FILTER_TYPE.LANGUAGE ? 'active btn btn-primary mx-3' : 'btn btn-secondary mx-3'} onClick={() => setFilter(FILTER_TYPE.LANGUAGE)}>Group By Language</button>\n        </div>\n        {\n          groupedData[currentFilter].map((entry, i) => {\n            if (selectedCountry === \"\") return <></>;\n            try {\n              const mappedCountries = entry[1].filter((country) => country.name.toLowerCase().includes(selectedCountry));\n              if (mappedCountries?.length > 0) {\n                return <><h1 className=\"animate__animated animate__fadeInRight\">{entry[0]}</h1>\n                  {mappedCountries.map((country) => {\n\n                    return (\n\n                      <div className=\"animate__animated animate__fadeInRight card my-3\" key={country.code}>\n                        <div className=\"card-body\">\n                          <h5 className=\"card-title\"><span>{country.emoji} </span>{country.name}</h5>\n                          <h6 className=\"card-subtitle mb-2 \">Capital: {country.capital}</h6>\n                          <h6 className=\"card-subtitle mb-2 \">Currency: {country.currency}</h6>\n                        </div>\n                      </div>)\n\n                  })}\n\n\n                </>\n              }\n            } catch (error) {\n              return <h1>Whoops! There has been an error!</h1>\n            }\n          })\n        }\n      </div>\n    </ApolloProvider>\n  )\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { ApolloProvider} from \"@apollo/react-hooks\";\nimport 'animate.css';\nimport ApolloClient from \"apollo-boost\";\n\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n});\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}